---
- name: Get installed pip version
  command: "{{ pip_executable }} --version"
  register: pip_version_output
  ignore_errors: yes
  changed_when: false

- name: Download get-pip.py
  vars:
      pip_version_url: "{{ (pip_get_pip_version == 'latest') | ternary('', pip_get_pip_version) }}"
      required_vars:
          - pip_get_pip_version
  get_url:
      url: 'https://bootstrap.pypa.io/{{ pip_version_url }}/get-pip.py'
      dest: /tmp/get-pip.py
  when: (pip_version_output is failed) or not pip_version_output.stdout is search(pip_version)

- name: Install pip
  become: yes
  become_method: sudo
  command: "{{ ansible_python_interpreter if ansible_python_interpreter is defined else 'python' }} get-pip.py pip=={{ pip_version }}"
  when: "(pip_version_output is failed) or not pip_version_output.stdout is search('pip ' + pip_version)"
  args:
    chdir: /tmp

- pip:
    name: kafka-python
    version: 1.4.6
  sudo: yes

- name: copying solutuin 1
  become: yes
  become_method: sudo
  copy:
    src: files/producer-input.py
    dest: /usr/local/bin/producer-input.py
    mode: +x 

- name: copying solutuin 2
  become: yes
  become_method: sudo
  copy:
    src: files/producer-output.py
    dest: /usr/local/bin/producer-output.py
    mode: +x 

- name: install systemd services - 1
  become: yes
  become_method: sudo
  template:
    src: templates/producer-input.service.j2
    dest: "{{ system_units }}/producer-input.service"
  register: producer-input_service

- name: install systemd services - 2
  become: yes
  become_method: sudo
  template:
    src: templates/producer-output.service.j2
    dest: "{{ system_units }}/producer-output.service"
  register: producer-output_service

- name: restart solution 1
  become: yes
  become_method: sudo
  systemd:
    enabled: yes
    state: restarted
    name: producer-input.service

- name: restart solution 2
  become: yes
  become_method: sudo
  systemd:
    enabled: yes
    state: restarted
    name: producer-output.service
